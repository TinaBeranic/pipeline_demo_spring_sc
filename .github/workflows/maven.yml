name: Build, test and deploy backend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and test with Maven
        run: mvn -B package --file pom.xml

      - name: Prepare JAR for upload
        run: mkdir build && cp target/*.jar build

      - name: Upload resulting JAR
        uses: actions/upload-artifact@v4
        with:
          name: Package
          path: build

  static-code-analysis:
    name: SonarCloud Analysis
    needs: build-test-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ZSsonar_pipeline_demo_spring_sc -Dskiptests

  deploy-docker-image:
    runs-on: ubuntu-latest
    needs: static-code-analysis

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v4
        with:
          name: Package
          path: target/

      - name: Generate image tag
        id: date
        run: echo "::set-output name=date::$(date +%Y%m%d-%H%M%S)"

      - name: Docker build
        run: docker build . -t iideveloper21/measurements-spring:$TAG_NAME
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Retag to latest
        run: docker tag iideveloper21/measurements-spring:$TAG_NAME iideveloper21/measurements-spring:latest
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Docker push
        run: docker push iideveloper21/measurements-spring:$TAG_NAME && docker push iideveloper21/measurements-spring:latest
        env:
          TAG_NAME: CD-${{ steps.date.outputs.date }}



  deliver-on-azure:
    runs-on: ubuntu-latest
    needs: deploy-docker-image

    steps:
      - name: Deploy to MS Azure
        run: echo "Deployed to MS Azure"
